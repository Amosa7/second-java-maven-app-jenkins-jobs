#!/usr/bin/env groovy

def gv

pipeline {
    tools {
        maven "maven-3.9"
    }
    agent any
    stages {

        stage("init") {
            steps {
                script {
                    gv = load "script.groovy"
                }
            }
        }

        stage("Version Increment") {
            steps {
                script {
                    echo "Incrementing app version... "
                    sh "mvn build-helper:parse-version versions:set -DnewVersion=\\\${parsedVersion.majorVersion}.\\\${parsedVersion.minorVersion}.\\\${parsedVersion.nextIncrementalVersion} versions:commit"
                    def matcher = readFile( 'pom.xml' ) =~ '<version>(.+)</version>'
                    def version = matcher[0][1]
                    env.IMAG_NAME = "${version}-${BUILD_NUMBER}"
                }
            }
        }

        stage("BuildApp") {
            steps {
                script {
                    echo "Building the application JAR"
                    sh "mvn clean package"
                }
            }
        }

        stage("Testing") {
            steps {
                script {
                    gv.Testing()
                }
            }
        }

        stage("Build and Push Image") {
            steps {
                script {
                    echo "Building Docker image of the application..."
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-repo2', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "docker build -t amosa77/demo-app:${IMAG_NAME} ."
                        sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
                        sh "docker push amosa77/demo-app:${IMAG_NAME}"
                    }
                }
            }
        }

        stage("DeployJAr") {
            steps {
                script {
                    echo "Deploying my Application..."
                    gv.DeployJAr()
                }
            }
        }

        stage("commit version update") {
            steps {
                script {
                    sshagent (credentials: ['Github-ssh-key']) {
                        sh "git config --global user.email 'amosabashir7@gmail.com'"
                        sh "git config --global user.name 'Amosa7'"
                        sh "git status"
                        sh "git branch"
                        sh "git config --list"
                        sh "git remote set-url origin 'git@github.com:Amosa7/second-java-maven-app-jenkins-jobs.git'"
                        sh "git add ."
                        sh 'git commit -m "ci: version bump"'
                        sh "git push origin HEAD:master"
                    }
                }
            }
        }
    }
}
